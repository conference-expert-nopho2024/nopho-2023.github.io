<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF Viewer</title>
    <style>
        #canvas-container {
            width: 100%;
            overflow: auto;
            background: #eee;
            text-align: center;
            padding: 20px;
        }
        canvas {
            border: 1px solid black;
        }
    </style>
</head>
<body>
    <div id="canvas-container">
        <canvas id="pdf-render"></canvas>
    </div>
    <div>
        <button id="prev-page">Previous Page</button>
        <button id="next-page">Next Page</button>
        <span>Page: <span id="page-num"></span> / <span id="page-count"></span></span>
        <button id="zoom-in">Zoom In</button>
        <button id="zoom-out">Zoom Out</button>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.min.js"></script>
    <script>
        const url = 'https://nopho-2023.github.io/archive/content/uploads/posters-2023/file73893_morkunaite.pdf'; // Replace with the actual URL to your PDF

        let pdfDoc = null,
            pageNum = 1,
            pageIsRendering = false,
            pageNumIsPending = null,
            scale = 1.0,
            canvas = document.querySelector('#pdf-render'),
            ctx = canvas.getContext('2d');

        function renderPage(num) {
            pageIsRendering = true;
            pdfDoc.getPage(num).then(page => {
                const viewport = page.getViewport({ scale: scale });
                canvas.height = viewport.height;
                canvas.width = viewport.width;

                const renderContext = {
                    canvasContext: ctx,
                    viewport: viewport
                };

                page.render(renderContext).promise.then(() => {
                    pageIsRendering = false;
                    if (pageNumIsPending !== null) {
                        renderPage(pageNumIsPending);
                        pageNumIsPending = null;
                    }
                });

                // Update page counters
                document.getElementById('page-num').textContent = num;
                document.getElementById('page-count').textContent = pdfDoc.numPages;
            });
        }

        function queueRenderPage(num) {
            if (pageIsRendering) {
                pageNumIsPending = num;
            } else {
                renderPage(num);
            }
        }

        function onPrevPage() {
            if (pageNum <= 1) {
                return;
            }
            pageNum--;
            queueRenderPage(pageNum);
        }

        function onNextPage() {
            if (pageNum >= pdfDoc.numPages) {
                return;
            }
            pageNum++;
            queueRenderPage(pageNum);
        }

        function onZoomIn() {
            scale *= 1.1;
            renderPage(pageNum);
        }

        function onZoomOut() {
            scale *= 0.9;
            renderPage(pageNum);
        }

        document.getElementById('prev-page').addEventListener('click', onPrevPage);
        document.getElementById('next-page').addEventListener('click', onNextPage);
        document.getElementById('zoom-in').addEventListener('click', onZoomIn);
        document.getElementById('zoom-out').addEventListener('click', onZoomOut);

        pdfjsLib.getDocument(url).promise.then(pdfDoc_ => {
            pdfDoc = pdfDoc_;
            renderPage(pageNum);
        });
    </script>
</body>
</html>
